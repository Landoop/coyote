- name: coyote
  title: Confluent CSD Tests
- name: w/o SASL, w/o SSL
  entries:
    - name: Create Topic (basic kafka)
      command: kafka-topics --zookeeper cloudera.landoop.com:2181/confluent --topic coyote_test_01 --partition 3 --replication 1 --create
    - name: List Topics (basic kafka)
      command: kafka-topics --zookeeper cloudera.landoop.com:2181/confluent --list
    - name: Performance Test (basic kafka)
      command: |
        kafka-producer-perf-test --topic coyote_test_01 --throughput 100000 --record-size 1000 --num-records 2000000
                                 --producer-props bootstrap.servers="cloudera.landoop.com:9092"
    - name: List Topics (rest proxy)
      command: curl -vs --stderr - "http://cloudera.landoop.com:8082/topics"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Topic Information (rest proxy)
      command: curl -vs --stderr - "http://cloudera.landoop.com:8082/topics/coyote_test_01"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Topic Partitions (rest proxy)
      command: curl -vs --stderr - "http://cloudera.landoop.com:8082/topics/coyote_test_01/partitions"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Delete Topic (basic kafka)
      command: kafka-topics --zookeeper cloudera.landoop.com:2181/confluent --topic coyote_test_01 --delete
    - name: Produce Avro Message (rest proxy, schema registry)
      command: |
        curl -vs --stderr - -XPOST -H "Content-Type: application/vnd.kafka.avro.v1+json"
             --data '{
                      "value_schema": "{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}",
                      "records": [{"value": {"name": "testUser"}}]
                     }'
             "http://cloudera.landoop.com:8082/topics/coyote_test_avro"
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Create Consumer for Avro data (rest proxy, schema registry)
      command: |
        curl -vs --stderr - -XPOST -H "Content-Type: application/vnd.kafka.v1+json"
             --data '{"name": "a_consumer", "format": "avro", "auto.offset.reset": "smallest"}'
             "http://cloudera.landoop.com:8082/consumers/coyote_avro"
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Consume Avro Message (rest proxy, schema registry)
      command: |
        curl -vs --stderr - -XGET -H "Accept: application/vnd.kafka.avro.v1+json"
             "http://cloudera.landoop.com:8082/consumers/coyote_avro/instances/a_consumer/topics/coyote_test_avro"
      stdout_has: [ 'testUser' ]
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Delete Avro Consumer (rest proxy, schema registry)
      command: curl -vs --stderr - -X DELETE "http://cloudera.landoop.com:8082/consumers/coyote_avro/instances/a_consumer"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
    - command: kafka-topics --zookeeper cloudera.landoop.com:2181/confluent --topic coyote_test_avro --delete
      nolog: true
    - name: Produce JSON Message (rest proxy)
      command: |
        curl -vs --stderr - -XPOST -H "Content-Type: application/vnd.kafka.json.v1+json"
              --data '{"records":[{"value":{"foo":"bar"}}]}' "http://cloudera.landoop.com:8082/topics/coyote_test_json"
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Create Consumer for JSON data (rest proxy)
      command: |
        curl -vs --stderr - -XPOST -H "Content-Type: application/vnd.kafka.v1+json"
              --data '{"name": "a_consumer", "format": "json", "auto.offset.reset": "smallest"}'
              "http://cloudera.landoop.com:8082/consumers/coyote_json"
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Consume JSON Message (rest proxy)
      command: |
        curl -vs --stderr - -XGET -H "Accept: application/vnd.kafka.json.v1+json" \
              "http://cloudera.landoop.com:8082/consumers/coyote_json/instances/a_consumer/topics/coyote_test_json"
      stdout_has: [ 'foo.*bar' ]
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Delete JSON Consumer (rest proxy)
      command: curl -vs --stderr - -X DELETE "http://cloudera.landoop.com:8082/consumers/coyote_json/instances/a_consumer"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
    - command: kafka-topics --zookeeper cloudera.landoop.com:2181/confluent --topic coyote_test_json --delete
      nolog: true
    - name: Produce Binary Message (rest proxy)
      command: |
        curl -vs --stderr - -XPOST -H "Content-Type: application/vnd.kafka.binary.v1+json"
            --data '{"records":[{"value":"S2Fma2E="}]}' "http://cloudera.landoop.com:8082/topics/coyote_test_binary"
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Create Consumer for Binary data (rest proxy)
      command: |
        curl -vs --stderr - -XPOST -H "Content-Type: application/vnd.kafka.v1+json"
              --data '{"name": "a_consumer", "format": "binary", "auto.offset.reset": "smallest"}'
              "http://cloudera.landoop.com:8082/consumers/coyote_binary"
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Consume Binary Message (rest proxy)
      command: |
        curl -vs --stderr - -XGET -H "Accept: application/vnd.kafka.binary.v1+json" \
              "http://cloudera.landoop.com:8082/consumers/coyote_binary/instances/a_consumer/topics/coyote_test_binary"
      stdout_has: [ 'S2Fma2E=' ]
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Delete Binary Consumer (rest proxy)
      command: curl -vs --stderr - -XDELETE "http://cloudera.landoop.com:8082/consumers/coyote_binary/instances/a_consumer"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
    - command: kafka-topics --zookeeper cloudera.landoop.com:2181/confluent --topic coyote_test_binary --delete
      nolog: true
    - name: Register a new Schema version (schema registry)
      command: |
        curl  -vs --stderr - -XPOST -i -H "Content-Type: application/vnd.schemaregistry.v1+json"
             --data '{"schema": "{\"type\": \"string\"}"}'
             "http://cloudera.landoop.com:8081/subjects/coyote_test_01/versions"
    - name: List subjects (schema registry)
      command: curl -vs --stderr - -XGET -i "http://cloudera.landoop.com:8081/subjects"
      stdout_has: [ 'coyote_test_01' ]
    - name: List Schema versions (schema registry)
      command: curl -vs --stderr - -XGET -i "http://cloudera.landoop.com:8081/subjects/coyote_test_01/versions"
    # - name: Fetch Schema by globally unique id 1 (schema registry)
    #   command: curl -vs --stderr - -XGET -i "http://cloudera.landoop.com:8081/schemas/ids/1"
    #   stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Fetch Schema by name and version (schema registry)
      command: curl -vs --stderr - -XGET -i "http://cloudera.landoop.com:8081/subjects/coyote_test_01/versions/1"
      stdout_has: [ '"subject":"coyote_test_01","version":1' ]
      stdout_not_has: [ 'error_code":[0-9]', 'Unexpected', 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Register Complex Schema (schema registry)
      command: |
        curl -vs --stderr - -XPOST -i -H "Content-Type: application/vnd.schemaregistry.v1+json"
             --data '{"schema": "{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}"}'
             "http://cloudera.landoop.com:8081/subjects/coyote_test_02/versions"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
    - name: Test Schema Compatibility (schema registry)
      command: |
        curl -vs --stderr - -XPOST -i -H "Content-Type: application/vnd.schemaregistry.v1+json"
             --data '{"schema": "{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}, {\"name\": \"address\", \"type\": \"string\"}]}"}'
             "http://cloudera.landoop.com:8081/compatibility/subjects/coyote_test_02/versions/latest"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
      stdout_has: [ 'is_compatible' ]
    - name: Get Schema Registry Configuration (schema registry)
      command: curl -vs --stderr - -XGET -i "http://cloudera.landoop.com:8081/config"
      stdout_not_has: [ 'HTTP/1.1 [45][0-9][0-9] ' ]
